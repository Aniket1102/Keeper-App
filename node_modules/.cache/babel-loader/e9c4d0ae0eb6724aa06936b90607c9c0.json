{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nvar AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nvar NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @typedef {import(\"../Entrypoint\")} Entrypoint */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  function SizeLimitsPlugin(options) {\n    _classCallCheck(this, SizeLimitsPlugin);\n\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler\n   * @returns {void}\n   */\n\n\n  _createClass(SizeLimitsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var entrypointSizeLimit = this.maxEntrypointSize;\n      var assetSizeLimit = this.maxAssetSize;\n      var hints = this.hints;\n\n      var assetFilter = this.assetFilter || function (name, source, info) {\n        return !info.development;\n      };\n\n      compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", function (compilation) {\n        var warnings = [];\n        /**\n         * @param {Entrypoint} entrypoint an entrypoint\n         * @returns {number} the size of the entrypoint\n         */\n\n        var getEntrypointSize = function getEntrypointSize(entrypoint) {\n          return entrypoint.getFiles().reduce(function (currentSize, file) {\n            var asset = compilation.getAsset(file);\n\n            if (asset && assetFilter(asset.name, asset.source, asset.info) && asset.source) {\n              return currentSize + (asset.info.size || asset.source.size());\n            }\n\n            return currentSize;\n          }, 0);\n        };\n\n        var assetsOverSizeLimit = [];\n\n        var _iterator = _createForOfIteratorHelper(compilation.getAssets()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _step.value,\n                name = _step$value.name,\n                source = _step$value.source,\n                info = _step$value.info;\n\n            if (!assetFilter(name, source, info) || !source) {\n              continue;\n            }\n\n            var size = info.size || source.size();\n\n            if (size > assetSizeLimit) {\n              assetsOverSizeLimit.push({\n                name: name,\n                size: size\n              });\n              /** @type {any} */\n\n              source.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var fileFilter = function fileFilter(name) {\n          var asset = compilation.getAsset(name);\n          return asset && assetFilter(asset.name, asset.source, asset.info);\n        };\n\n        var entrypointsOverLimit = [];\n\n        var _iterator2 = _createForOfIteratorHelper(compilation.entrypoints),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _step2$value = _slicedToArray(_step2.value, 2),\n                _name = _step2$value[0],\n                entry = _step2$value[1];\n\n            var _size = getEntrypointSize(entry);\n\n            if (_size > entrypointSizeLimit) {\n              entrypointsOverLimit.push({\n                name: _name,\n                size: _size,\n                files: entry.getFiles().filter(fileFilter)\n              });\n              /** @type {any} */\n\n              entry.isOverSizeLimit = true;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        if (hints) {\n          // 1. Individual Chunk: Size < 250kb\n          // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n          // 3. No Async Chunks\n          // if !1, then 2, if !2 return\n          if (assetsOverSizeLimit.length > 0) {\n            warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n          }\n\n          if (entrypointsOverLimit.length > 0) {\n            warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n          }\n\n          if (warnings.length > 0) {\n            var hasAsyncChunks = compilation.chunks.filter(function (chunk) {\n              return !chunk.canBeInitial();\n            }).length > 0;\n\n            if (!hasAsyncChunks) {\n              warnings.push(new NoAsyncChunksWarning());\n            }\n\n            if (hints === \"error\") {\n              var _compilation$errors;\n\n              (_compilation$errors = compilation.errors).push.apply(_compilation$errors, warnings);\n            } else {\n              var _compilation$warnings;\n\n              (_compilation$warnings = compilation.warnings).push.apply(_compilation$warnings, warnings);\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return SizeLimitsPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}