{"ast":null,"code":"\"use strict\";\n/**\n * intersect creates Set containing the intersection of elements between all sets\n * @param {Set[]} sets an array of sets being checked for shared elements\n * @returns {Set<TODO>} returns a new Set containing the intersecting items\n */\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar intersect = function intersect(sets) {\n  if (sets.length === 0) return new Set();\n  if (sets.length === 1) return new Set(sets[0]);\n  var minSize = Infinity;\n  var minIndex = -1;\n\n  for (var i = 0; i < sets.length; i++) {\n    var size = sets[i].size;\n\n    if (size < minSize) {\n      minIndex = i;\n      minSize = size;\n    }\n  }\n\n  var current = new Set(sets[minIndex]);\n\n  for (var _i = 0; _i < sets.length; _i++) {\n    if (_i === minIndex) continue;\n    var set = sets[_i];\n\n    var _iterator = _createForOfIteratorHelper(current),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n\n        if (!set.has(item)) {\n          current.delete(item);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return current;\n};\n/**\n * Checks if a set is the subset of another set\n * @param {Set<TODO>} bigSet a Set which contains the original elements to compare against\n * @param {Set<TODO>} smallSet the set whos elements might be contained inside of bigSet\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\n */\n\n\nvar isSubset = function isSubset(bigSet, smallSet) {\n  if (bigSet.size < smallSet.size) return false;\n\n  var _iterator2 = _createForOfIteratorHelper(smallSet),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var item = _step2.value;\n      if (!bigSet.has(item)) return false;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return true;\n};\n\nexports.intersect = intersect;\nexports.isSubset = isSubset;","map":null,"metadata":{},"sourceType":"script"}