{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Template = require(\"../Template\");\n\nvar WebWorkerMainTemplatePlugin = /*#__PURE__*/function () {\n  function WebWorkerMainTemplatePlugin() {\n    _classCallCheck(this, WebWorkerMainTemplatePlugin);\n  }\n\n  _createClass(WebWorkerMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {\n        var _iterator = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunkGroup = _step.value;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      };\n\n      mainTemplate.hooks.localVars.tap(\"WebWorkerMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"1\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(function (id) {\n            return \"\".concat(JSON.stringify(id), \": 1\");\n          }).join(\",\\n\")), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"WebWorkerMainTemplatePlugin\", function (_, chunk, hash) {\n        var chunkFilename = mainTemplate.outputOptions.chunkFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        return Template.asString([\"promises.push(Promise.resolve().then(function() {\", Template.indent(['// \"1\" is the signal for \"already loaded\"', \"if(!installedChunks[chunkId]) {\", Template.indent([\"importScripts(\" + \"__webpack_require__.p + \" + mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = Object.create(null);\n\n              for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {\n                var chunkId = _Object$keys[_i];\n\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            contentHash: {\n              javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n            },\n            contentHashWithLength: {\n              javascript: function javascript(length) {\n                var shortContentHashMap = {};\n                var contentHash = chunkMaps.contentHash.javascript;\n\n                for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {\n                  var chunkId = _Object$keys2[_i2];\n\n                  if (typeof contentHash[chunkId] === \"string\") {\n                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n              }\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          },\n          contentHashType: \"javascript\"\n        }) + \");\"]), \"}\"]), \"}));\"]);\n      });\n      mainTemplate.hooks.bootstrap.tap(\"WebWorkerMainTemplatePlugin\", function (source, chunk, hash) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          var chunkCallbackName = mainTemplate.outputOptions.chunkCallbackName;\n          var globalObject = mainTemplate.outputOptions.globalObject;\n          return Template.asString([source, \"\".concat(globalObject, \"[\").concat(JSON.stringify(chunkCallbackName), \"] = function webpackChunkCallback(chunkIds, moreModules) {\"), Template.indent([\"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\", \"while(chunkIds.length)\", Template.indent(\"installedChunks[chunkIds.pop()] = 1;\")]), \"};\"]);\n        }\n\n        return source;\n      });\n      mainTemplate.hooks.hotBootstrap.tap(\"WebWorkerMainTemplatePlugin\", function (source, chunk, hash) {\n        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n        var hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;\n        var globalObject = mainTemplate.outputOptions.globalObject;\n        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"'\n          }\n        });\n        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          }\n        });\n        return source + \"\\n\" + \"var parentHotUpdateCallback = \".concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"];\\n\") + \"\".concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"] = \") + Template.getFunctionContent(require(\"./WebWorkerMainTemplate.runtime\")).replace(/\\/\\/\\$semicolon/g, \";\").replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename).replace(/\\$hash\\$/g, JSON.stringify(hash));\n      });\n      mainTemplate.hooks.hash.tap(\"WebWorkerMainTemplatePlugin\", function (hash) {\n        hash.update(\"webworker\");\n        hash.update(\"4\");\n      });\n    }\n  }]);\n\n  return WebWorkerMainTemplatePlugin;\n}();\n\nmodule.exports = WebWorkerMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}