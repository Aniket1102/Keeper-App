{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar slashCode = \"/\".charCodeAt(0);\nvar backslashCode = \"\\\\\".charCodeAt(0);\n\nvar isInside = function isInside(path, parent) {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  var charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  function RestrictionsPlugin(source, restrictions) {\n    _classCallCheck(this, RestrictionsPlugin);\n\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n\n  _createClass(RestrictionsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", function (request, resolveContext, callback) {\n        if (typeof request.path === \"string\") {\n          var path = request.path;\n\n          for (var i = 0; i < _this.restrictions.length; i++) {\n            var rule = _this.restrictions[i];\n\n            if (typeof rule === \"string\") {\n              if (!isInside(path, rule)) {\n                if (resolveContext.log) {\n                  resolveContext.log(\"\".concat(path, \" is not inside of the restriction \").concat(rule));\n                }\n\n                return callback(null, null);\n              }\n            } else if (!rule.test(path)) {\n              if (resolveContext.log) {\n                resolveContext.log(\"\".concat(path, \" doesn't match the restriction \").concat(rule));\n              }\n\n              return callback(null, null);\n            }\n          }\n        }\n\n        callback();\n      });\n    }\n  }]);\n\n  return RestrictionsPlugin;\n}();","map":null,"metadata":{},"sourceType":"script"}