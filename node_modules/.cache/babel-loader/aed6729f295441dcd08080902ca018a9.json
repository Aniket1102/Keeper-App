{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _require = require(\"webpack-sources\"),\n    ConcatSource = _require.ConcatSource;\n\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nvar Template = require(\"./Template\");\n\nvar validateOptions = require(\"schema-utils\");\n\nvar schema = require(\"../schemas/plugins/BannerPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\n\nvar BannerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n\n    validateOptions(schema, options, \"Banner Plugin\");\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    /** @type {BannerPluginOptions} */\n\n\n    this.options = options;\n    var bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      var getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", function (chunks) {\n          var _iterator = _createForOfIteratorHelper(chunks),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n\n              var _iterator2 = _createForOfIteratorHelper(chunk.files),\n                  _step2;\n\n              try {\n                var _loop = function _loop() {\n                  var file = _step2.value;\n\n                  if (!matchObject(file)) {\n                    return \"continue\";\n                  }\n\n                  var query = \"\";\n                  var filename = file;\n                  var hash = compilation.hash;\n                  var querySplit = filename.indexOf(\"?\");\n\n                  if (querySplit >= 0) {\n                    query = filename.substr(querySplit);\n                    filename = filename.substr(0, querySplit);\n                  }\n\n                  var lastSlashIndex = filename.lastIndexOf(\"/\");\n                  var basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n                  var data = {\n                    hash: hash,\n                    chunk: chunk,\n                    filename: filename,\n                    basename: basename,\n                    query: query\n                  };\n                  var comment = compilation.getPath(banner(data), data);\n                  compilation.updateAsset(file, function (old) {\n                    return new ConcatSource(comment, \"\\n\", old);\n                  });\n                };\n\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _ret = _loop();\n\n                  if (_ret === \"continue\") continue;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n\n  return BannerPlugin;\n}();\n\nmodule.exports = BannerPlugin;","map":null,"metadata":{},"sourceType":"script"}