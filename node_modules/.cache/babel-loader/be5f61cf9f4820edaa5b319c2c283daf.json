{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _require = require(\"tapable\"),\n    Tapable = _require.Tapable,\n    HookMap = _require.HookMap,\n    SyncHook = _require.SyncHook,\n    SyncWaterfallHook = _require.SyncWaterfallHook;\n\nvar Factory = require(\"enhanced-resolve\").ResolverFactory;\n\nvar _require2 = require(\"./util/cleverMerge\"),\n    cachedCleverMerge = _require2.cachedCleverMerge;\n/** @typedef {import(\"enhanced-resolve\").Resolver} Resolver */\n\n\nvar EMTPY_RESOLVE_OPTIONS = {};\n\nmodule.exports = /*#__PURE__*/function (_Tapable) {\n  _inherits(ResolverFactory, _Tapable);\n\n  var _super = _createSuper(ResolverFactory);\n\n  function ResolverFactory() {\n    var _this;\n\n    _classCallCheck(this, ResolverFactory);\n\n    _this = _super.call(this);\n    _this.hooks = {\n      resolveOptions: new HookMap(function () {\n        return new SyncWaterfallHook([\"resolveOptions\"]);\n      }),\n      resolver: new HookMap(function () {\n        return new SyncHook([\"resolver\", \"resolveOptions\"]);\n      })\n    };\n\n    _this._pluginCompat.tap(\"ResolverFactory\", function (options) {\n      var match;\n      match = /^resolve-options (.+)$/.exec(options.name);\n\n      if (match) {\n        _this.hooks.resolveOptions.for(match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\n        return true;\n      }\n\n      match = /^resolver (.+)$/.exec(options.name);\n\n      if (match) {\n        _this.hooks.resolver.for(match[1]).tap(options.fn.name || \"unnamed compat plugin\", options.fn);\n\n        return true;\n      }\n    });\n\n    _this.cache2 = new Map();\n    return _this;\n  }\n\n  _createClass(ResolverFactory, [{\n    key: \"get\",\n    value: function get(type, resolveOptions) {\n      resolveOptions = resolveOptions || EMTPY_RESOLVE_OPTIONS;\n      var ident = \"\".concat(type, \"|\").concat(JSON.stringify(resolveOptions));\n      var resolver = this.cache2.get(ident);\n      if (resolver) return resolver;\n\n      var newResolver = this._create(type, resolveOptions);\n\n      this.cache2.set(ident, newResolver);\n      return newResolver;\n    }\n  }, {\n    key: \"_create\",\n    value: function _create(type, resolveOptions) {\n      var _this2 = this;\n\n      var originalResolveOptions = Object.assign({}, resolveOptions);\n      resolveOptions = this.hooks.resolveOptions.for(type).call(resolveOptions);\n      var resolver = Factory.createResolver(resolveOptions);\n\n      if (!resolver) {\n        throw new Error(\"No resolver created\");\n      }\n      /** @type {Map<Object, Resolver>} */\n\n\n      var childCache = new Map();\n\n      resolver.withOptions = function (options) {\n        var cacheEntry = childCache.get(options);\n        if (cacheEntry !== undefined) return cacheEntry;\n        var mergedOptions = cachedCleverMerge(originalResolveOptions, options);\n\n        var resolver = _this2.get(type, mergedOptions);\n\n        childCache.set(options, resolver);\n        return resolver;\n      };\n\n      this.hooks.resolver.for(type).call(resolver, resolveOptions);\n      return resolver;\n    }\n  }]);\n\n  return ResolverFactory;\n}(Tapable);","map":null,"metadata":{},"sourceType":"script"}