{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar asyncLib = require(\"neo-async\");\n\nvar MultiWatching = /*#__PURE__*/function () {\n  function MultiWatching(watchings, compiler) {\n    _classCallCheck(this, MultiWatching);\n\n    this.watchings = watchings;\n    this.compiler = compiler;\n  }\n\n  _createClass(MultiWatching, [{\n    key: \"invalidate\",\n    value: function invalidate() {\n      var _iterator = _createForOfIteratorHelper(this.watchings),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var watching = _step.value;\n          watching.invalidate();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"suspend\",\n    value: function suspend() {\n      var _iterator2 = _createForOfIteratorHelper(this.watchings),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var watching = _step2.value;\n          watching.suspend();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      var _iterator3 = _createForOfIteratorHelper(this.watchings),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watching = _step3.value;\n          watching.resume();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this = this;\n\n      asyncLib.forEach(this.watchings, function (watching, finishedCallback) {\n        watching.close(finishedCallback);\n      }, function (err) {\n        _this.compiler.hooks.watchClose.call();\n\n        if (typeof callback === \"function\") {\n          _this.compiler.running = false;\n          callback(err);\n        }\n      });\n    }\n  }]);\n\n  return MultiWatching;\n}();\n\nmodule.exports = MultiWatching;","map":null,"metadata":{},"sourceType":"script"}