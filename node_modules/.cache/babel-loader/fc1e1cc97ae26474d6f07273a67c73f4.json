{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar OccurrenceOrderPlugin = /*#__PURE__*/function () {\n  function OccurrenceOrderPlugin(preferEntry) {\n    _classCallCheck(this, OccurrenceOrderPlugin);\n\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n\n    this.preferEntry = preferEntry;\n  }\n\n  _createClass(OccurrenceOrderPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var preferEntry = this.preferEntry;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", function (compilation) {\n        compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", function (modules) {\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n\n          var _iterator = _createForOfIteratorHelper(modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n\n              var _iterator4 = _createForOfIteratorHelper(_m.chunksIterable),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var c = _step4.value;\n                  if (c.canBeInitial()) initial++;\n                  if (c.entryModule === _m) entry++;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var countOccursInEntry = function countOccursInEntry(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            return sum + initialChunkChunkMap.get(r.module);\n          };\n\n          var countOccurs = function countOccurs(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n\n            var factor = 1;\n\n            if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n              factor = r.dependency.getNumberOfIdOccurrences();\n            }\n\n            if (factor === 0) {\n              return sum;\n            }\n\n            return sum + factor * r.module.getNumberOfChunks();\n          };\n\n          if (preferEntry) {\n            var _iterator2 = _createForOfIteratorHelper(modules),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var m = _step2.value;\n                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          var originalOrder = new Map();\n          var i = 0;\n\n          var _iterator3 = _createForOfIteratorHelper(modules),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _m2 = _step3.value;\n\n              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);\n\n              occursInAllChunksMap.set(_m2, _result);\n              originalOrder.set(_m2, i++);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          modules.sort(function (a, b) {\n            if (preferEntry) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n        compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", function (chunks) {\n          var occursInInitialChunksMap = new Map();\n          var originalOrder = new Map();\n          var i = 0;\n\n          var _iterator5 = _createForOfIteratorHelper(chunks),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var c = _step5.value;\n              var occurs = 0;\n\n              var _iterator6 = _createForOfIteratorHelper(c.groupsIterable),\n                  _step6;\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkGroup = _step6.value;\n\n                  var _iterator7 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var parent = _step7.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              occursInInitialChunksMap.set(c, occurs);\n              originalOrder.set(c, i++);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          chunks.sort(function (a, b) {\n            var aEntryOccurs = occursInInitialChunksMap.get(a);\n            var bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n\n  return OccurrenceOrderPlugin;\n}();\n\nmodule.exports = OccurrenceOrderPlugin;","map":null,"metadata":{},"sourceType":"script"}