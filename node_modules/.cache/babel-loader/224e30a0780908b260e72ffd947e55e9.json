{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nvar RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nvar RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nvar ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nvar RequireResolveDependencyParserPlugin = /*#__PURE__*/function () {\n  function RequireResolveDependencyParserPlugin(options) {\n    _classCallCheck(this, RequireResolveDependencyParserPlugin);\n\n    this.options = options;\n  }\n\n  _createClass(RequireResolveDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      var options = this.options;\n\n      var process = function process(expr, weak) {\n        if (expr.arguments.length !== 1) return;\n        var param = parser.evaluateExpression(expr.arguments[0]);\n\n        if (param.isConditional()) {\n          var _iterator = _createForOfIteratorHelper(param.options),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var option = _step.value;\n              var result = processItem(expr, option, weak);\n\n              if (result === undefined) {\n                processContext(expr, option, weak);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var dep = new RequireResolveHeaderDependency(expr.callee.range);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return true;\n        } else {\n          var _result = processItem(expr, param, weak);\n\n          if (_result === undefined) {\n            processContext(expr, param, weak);\n          }\n\n          var _dep = new RequireResolveHeaderDependency(expr.callee.range);\n\n          _dep.loc = expr.loc;\n          parser.state.current.addDependency(_dep);\n          return true;\n        }\n      };\n\n      var processItem = function processItem(expr, param, weak) {\n        if (param.isString()) {\n          var dep = new RequireResolveDependency(param.string, param.range);\n          dep.loc = expr.loc;\n          dep.optional = !!parser.scope.inTry;\n          dep.weak = weak;\n          parser.state.current.addDependency(dep);\n          return true;\n        }\n      };\n\n      var processContext = function processContext(expr, param, weak) {\n        var dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options, {\n          mode: weak ? \"weak\" : \"sync\"\n        }, parser);\n        if (!dep) return;\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        parser.state.current.addDependency(dep);\n        return true;\n      };\n\n      parser.hooks.call.for(\"require.resolve\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, false);\n      });\n      parser.hooks.call.for(\"require.resolveWeak\").tap(\"RequireResolveDependencyParserPlugin\", function (expr) {\n        return process(expr, true);\n      });\n    }\n  }]);\n\n  return RequireResolveDependencyParserPlugin;\n}();\n\nmodule.exports = RequireResolveDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"script"}