{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar MappingsContext = /*#__PURE__*/function () {\n  function MappingsContext() {\n    _classCallCheck(this, MappingsContext);\n\n    this.sourcesIndices = new Map();\n    this.sourcesContent = new Map();\n    this.hasSourceContent = false;\n    this.currentOriginalLine = 1;\n    this.currentSource = 0;\n    this.unfinishedGeneratedLine = false;\n  }\n\n  _createClass(MappingsContext, [{\n    key: \"ensureSource\",\n    value: function ensureSource(source, originalSource) {\n      var idx = this.sourcesIndices.get(source);\n\n      if (typeof idx === \"number\") {\n        return idx;\n      }\n\n      idx = this.sourcesIndices.size;\n      this.sourcesIndices.set(source, idx);\n      this.sourcesContent.set(source, originalSource);\n      if (typeof originalSource === \"string\") this.hasSourceContent = true;\n      return idx;\n    }\n  }, {\n    key: \"getArrays\",\n    value: function getArrays() {\n      var sources = [];\n      var sourcesContent = [];\n\n      var _iterator = _createForOfIteratorHelper(this.sourcesContent),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          sources.push(pair[0]);\n          sourcesContent.push(pair[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        sources: sources,\n        sourcesContent: sourcesContent\n      };\n    }\n  }]);\n\n  return MappingsContext;\n}();\n\nmodule.exports = MappingsContext;","map":null,"metadata":{},"sourceType":"script"}