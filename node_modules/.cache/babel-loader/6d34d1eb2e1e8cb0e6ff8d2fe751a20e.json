{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar GraphHelpers = require(\"../GraphHelpers\");\n\nvar EnsureChunkConditionsPlugin = /*#__PURE__*/function () {\n  function EnsureChunkConditionsPlugin() {\n    _classCallCheck(this, EnsureChunkConditionsPlugin);\n  }\n\n  _createClass(EnsureChunkConditionsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"EnsureChunkConditionsPlugin\", function (compilation) {\n        var handler = function handler(chunks) {\n          var changed = false;\n\n          var _iterator = _createForOfIteratorHelper(compilation.modules),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              if (!_module.chunkCondition) continue;\n              var sourceChunks = new Set();\n              var chunkGroups = new Set();\n\n              var _iterator2 = _createForOfIteratorHelper(_module.chunksIterable),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var chunk = _step2.value;\n\n                  if (!_module.chunkCondition(chunk)) {\n                    sourceChunks.add(chunk);\n\n                    var _iterator6 = _createForOfIteratorHelper(chunk.groupsIterable),\n                        _step6;\n\n                    try {\n                      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                        var group = _step6.value;\n                        chunkGroups.add(group);\n                      }\n                    } catch (err) {\n                      _iterator6.e(err);\n                    } finally {\n                      _iterator6.f();\n                    }\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              if (sourceChunks.size === 0) continue;\n              var targetChunks = new Set();\n\n              var _iterator3 = _createForOfIteratorHelper(chunkGroups),\n                  _step3;\n\n              try {\n                chunkGroupLoop: for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var chunkGroup = _step3.value;\n\n                  // Can module be placed in a chunk of this group?\n                  var _iterator7 = _createForOfIteratorHelper(chunkGroup.chunks),\n                      _step7;\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var _chunk = _step7.value;\n\n                      if (_module.chunkCondition(_chunk)) {\n                        targetChunks.add(_chunk);\n                        continue chunkGroupLoop;\n                      }\n                    } // We reached the entrypoint: fail\n\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n\n                  if (chunkGroup.isInitial()) {\n                    throw new Error(\"Cannot fullfil chunk condition of \" + _module.identifier());\n                  } // Try placing in all parents\n\n\n                  var _iterator8 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                      _step8;\n\n                  try {\n                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                      var _group = _step8.value;\n                      chunkGroups.add(_group);\n                    }\n                  } catch (err) {\n                    _iterator8.e(err);\n                  } finally {\n                    _iterator8.f();\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n\n              var _iterator4 = _createForOfIteratorHelper(sourceChunks),\n                  _step4;\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var sourceChunk = _step4.value;\n                  GraphHelpers.disconnectChunkAndModule(sourceChunk, _module);\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              var _iterator5 = _createForOfIteratorHelper(targetChunks),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var targetChunk = _step5.value;\n                  GraphHelpers.connectChunkAndModule(targetChunk, _module);\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (changed) return true;\n        };\n\n        compilation.hooks.optimizeChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n        compilation.hooks.optimizeExtractedChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n      });\n    }\n  }]);\n\n  return EnsureChunkConditionsPlugin;\n}();\n\nmodule.exports = EnsureChunkConditionsPlugin;","map":null,"metadata":{},"sourceType":"script"}