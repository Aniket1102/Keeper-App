{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ANIKE\\\\Desktop\\\\Udemy\\\\Web Developing\\\\keeper-app-part-1-starting\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar path = require(\"path\");\n\nvar ContextElementDependency = require(\"./dependencies/ContextElementDependency\");\n\nvar ContextReplacementPlugin = /*#__PURE__*/function () {\n  function ContextReplacementPlugin(resourceRegExp, newContentResource, newContentRecursive, newContentRegExp) {\n    _classCallCheck(this, ContextReplacementPlugin);\n\n    this.resourceRegExp = resourceRegExp;\n\n    if (typeof newContentResource === \"function\") {\n      this.newContentCallback = newContentResource;\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"object\") {\n      this.newContentResource = newContentResource;\n\n      this.newContentCreateContextMap = function (fs, callback) {\n        callback(null, newContentRecursive);\n      };\n    } else if (typeof newContentResource === \"string\" && typeof newContentRecursive === \"function\") {\n      this.newContentResource = newContentResource;\n      this.newContentCreateContextMap = newContentRecursive;\n    } else {\n      if (typeof newContentResource !== \"string\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = newContentResource;\n        newContentResource = undefined;\n      }\n\n      if (typeof newContentRecursive !== \"boolean\") {\n        newContentRegExp = newContentRecursive;\n        newContentRecursive = undefined;\n      }\n\n      this.newContentResource = newContentResource;\n      this.newContentRecursive = newContentRecursive;\n      this.newContentRegExp = newContentRegExp;\n    }\n  }\n\n  _createClass(ContextReplacementPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var resourceRegExp = this.resourceRegExp;\n      var newContentCallback = this.newContentCallback;\n      var newContentResource = this.newContentResource;\n      var newContentRecursive = this.newContentRecursive;\n      var newContentRegExp = this.newContentRegExp;\n      var newContentCreateContextMap = this.newContentCreateContextMap;\n      compiler.hooks.contextModuleFactory.tap(\"ContextReplacementPlugin\", function (cmf) {\n        cmf.hooks.beforeResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.request)) {\n            if (newContentResource !== undefined) {\n              result.request = newContentResource;\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              newContentCallback(result);\n            } else {\n              var _iterator = _createForOfIteratorHelper(result.dependencies),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var d = _step.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          }\n\n          return result;\n        });\n        cmf.hooks.afterResolve.tap(\"ContextReplacementPlugin\", function (result) {\n          if (!result) return;\n\n          if (resourceRegExp.test(result.resource)) {\n            if (newContentResource !== undefined) {\n              result.resource = path.resolve(result.resource, newContentResource);\n            }\n\n            if (newContentRecursive !== undefined) {\n              result.recursive = newContentRecursive;\n            }\n\n            if (newContentRegExp !== undefined) {\n              result.regExp = newContentRegExp;\n            }\n\n            if (typeof newContentCreateContextMap === \"function\") {\n              result.resolveDependencies = createResolveDependenciesFromContextMap(newContentCreateContextMap);\n            }\n\n            if (typeof newContentCallback === \"function\") {\n              var origResource = result.resource;\n              newContentCallback(result);\n\n              if (result.resource !== origResource) {\n                result.resource = path.resolve(origResource, result.resource);\n              }\n            } else {\n              var _iterator2 = _createForOfIteratorHelper(result.dependencies),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var d = _step2.value;\n                  if (d.critical) d.critical = false;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n\n          return result;\n        });\n      });\n    }\n  }]);\n\n  return ContextReplacementPlugin;\n}();\n\nvar createResolveDependenciesFromContextMap = function createResolveDependenciesFromContextMap(createContextMap) {\n  var resolveDependenciesFromContextMap = function resolveDependenciesFromContextMap(fs, options, callback) {\n    createContextMap(fs, function (err, map) {\n      if (err) return callback(err);\n      var dependencies = Object.keys(map).map(function (key) {\n        return new ContextElementDependency(map[key] + options.resourceQuery, key);\n      });\n      callback(null, dependencies);\n    });\n  };\n\n  return resolveDependenciesFromContextMap;\n};\n\nmodule.exports = ContextReplacementPlugin;","map":null,"metadata":{},"sourceType":"script"}